import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class TicTacToe {

    static ArrayList<Integer> playerPositions = new ArrayList<Integer>();
    static ArrayList<Integer> CPUPositions = new ArrayList<Integer>();

    public static void printGameBoard (char[][] gameBoard) {
        for (char [] row : gameBoard) {
            for (char c : row) {
                System.out.print(c);
            }
            System.out.println();
        }
    }

    public static void placePieceOn (char [][] gameBoard, int position, String user) {

        char Symbol = ' ';
        if (user.equals("Player")) {
            Symbol = 'X';
            playerPositions.add(position);
        } else if (user.equals("CPU")) {
            Symbol = 'O';
            CPUPositions.add(position);
        }
        switch(position) {
            case 1: gameBoard [0] [0] = Symbol; break;
            case 2: gameBoard [0] [2] = Symbol; break;
            case 3: gameBoard [0] [4] = Symbol; break;
            case 4: gameBoard [2] [0] = Symbol; break;
            case 5: gameBoard [2] [2] = Symbol; break;
            case 6: gameBoard [2] [4] = Symbol; break;
            case 7: gameBoard [4] [0] = Symbol; break;
            case 8: gameBoard [4] [2] = Symbol; break;
            case 9: gameBoard [4] [4] = Symbol; break;
            default : break;
        }
    }

    public static String checkWinner() {

        List topRow = Arrays.asList(1, 2, 3);
        List midRow = Arrays.asList(4, 5, 6);
        List bottomRow = Arrays.asList(7, 8, 9);
        List leftColumn = Arrays.asList(1, 4, 7);
        List midColumn = Arrays.asList(2, 5, 8);
        List rightColumn = Arrays.asList(3, 6, 9);
        List cross1 = Arrays.asList(1, 5, 9);
        List cross2 = Arrays.asList(3, 5, 7);

        List<List> winning = new ArrayList<List>();
            winning.add(topRow);
            winning.add(midRow);
            winning.add(bottomRow);
            winning.add(leftColumn);
            winning.add(midColumn);
            winning.add(rightColumn);
            winning.add(cross1);
            winning.add(cross2);

            for (List l : winning) {
                if(playerPositions.containsAll(l)) {
                    return "+*   *   *   *   *   *   *   *   *   *   *   *  +\n" +
                           "    !!!!!  Congratulations  !  You Won !!!!!     \n" +
                           "+*   *   *   *   *   *   *   *   *   *   *   *  +\n";
                } else if (CPUPositions.containsAll(l)) {
                    return "+ - - - - - - - - - - - +\n" +
                           "    ~~~ CPU Wins ~~~     \n" +
                           "+-  - - - - - - - - - - +\n";
                } else if (playerPositions.size() + CPUPositions.size() == 9) {
                    return "+--------------------------------------+\n" +
                           "    .. Nobody wins..... It's a Tie..    \n" +
                           "+--------------------------------------+\n";
                }
            }

        return "";
    }

    public static void main(String[] args) {

        char [][] gameBoard = {{' ', '|', ' ', '|', ' '},
                               {'-', '+', '-', '+', '-'},
                               {' ', '|', ' ', '|', ' '},
                               {'-', '+', '-', '+', '-'},
                               {' ', '|', ' ', '|', ' '}};

        printGameBoard(gameBoard);

        while (true) {
            Scanner sc = new Scanner(System.in);
            System.out.print("Please enter your placement PlayerPos (1-9):  ");
            int PlayerPos = sc.nextInt();

            while (playerPositions.contains(PlayerPos) || CPUPositions.contains(PlayerPos)) {
                System.out.println("!!!!     Position already entered. Please enter a another(not filled) position    !!!!!!!");
                PlayerPos = sc.nextInt();
            }

            System.out.println("The PlayerPos entered is: " + PlayerPos);

            placePieceOn(gameBoard, PlayerPos, "Player");

            String result = checkWinner();
            if (result.length() > 0) {
                System.out.println(result);
                break;
            }

            Random rc = new Random();
            int CPUpos = rc.nextInt(9) + 1;
            while (playerPositions.contains(CPUpos) || CPUPositions.contains(CPUpos)) {
                CPUpos = rc.nextInt(9) + 1;
            }
            placePieceOn(gameBoard, CPUpos, "CPU");

            printGameBoard(gameBoard);

            result = checkWinner();
            if (result.length() > 0) {
                System.out.println(result);
                break;
            }
        }
    }
}
